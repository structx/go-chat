// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: users.sql

package repository

import (
	"context"
)

const insertUser = `-- name: InsertUser :one
INSERT INTO users (uuid, usernm, email)
VALUES (
    ?, ?, ?
) RETURNING uuid, usernm, email, created_at, updated_at
`

type InsertUserParams struct {
	Uuid   string
	Usernm string
	Email  string
}

// add user to database
func (q *Queries) InsertUser(ctx context.Context, arg *InsertUserParams) (*User, error) {
	row := q.queryRow(ctx, q.insertUserStmt, insertUser, arg.Uuid, arg.Usernm, arg.Email)
	var i User
	err := row.Scan(
		&i.Uuid,
		&i.Usernm,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const readUser = `-- name: ReadUser :one
SELECT uuid, usernm, email, created_at, updated_at
FROM users
WHERE uuid = ?
`

// read user by uuid
func (q *Queries) ReadUser(ctx context.Context, uuid string) (*User, error) {
	row := q.queryRow(ctx, q.readUserStmt, readUser, uuid)
	var i User
	err := row.Scan(
		&i.Uuid,
		&i.Usernm,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const readUserDetails = `-- name: ReadUserDetails :one
SELECT usernm, email
FROM users
WHERE uuid = ?
`

type ReadUserDetailsRow struct {
	Usernm string
	Email  string
}

// read user details by uuid
func (q *Queries) ReadUserDetails(ctx context.Context, uuid string) (*ReadUserDetailsRow, error) {
	row := q.queryRow(ctx, q.readUserDetailsStmt, readUserDetails, uuid)
	var i ReadUserDetailsRow
	err := row.Scan(&i.Usernm, &i.Email)
	return &i, err
}

const searchUserDetails = `-- name: SearchUserDetails :many
SELECT uuid, usernm
FROM users
WHERE usernm LIKE ? 
    OR email LIKE ?
LIMIT 10
`

type SearchUserDetailsParams struct {
	Usernm string
	Email  string
}

type SearchUserDetailsRow struct {
	Uuid   string
	Usernm string
}

// find all users who match search query
func (q *Queries) SearchUserDetails(ctx context.Context, arg *SearchUserDetailsParams) ([]*SearchUserDetailsRow, error) {
	rows, err := q.query(ctx, q.searchUserDetailsStmt, searchUserDetails, arg.Usernm, arg.Email)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*SearchUserDetailsRow{}
	for rows.Next() {
		var i SearchUserDetailsRow
		if err := rows.Scan(&i.Uuid, &i.Usernm); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    usernm = ?,
    email = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE uuid = ?
RETURNING uuid, usernm, email, created_at, updated_at
`

type UpdateUserParams struct {
	Usernm string
	Email  string
	Uuid   string
}

func (q *Queries) UpdateUser(ctx context.Context, arg *UpdateUserParams) (*User, error) {
	row := q.queryRow(ctx, q.updateUserStmt, updateUser, arg.Usernm, arg.Email, arg.Uuid)
	var i User
	err := row.Scan(
		&i.Uuid,
		&i.Usernm,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
