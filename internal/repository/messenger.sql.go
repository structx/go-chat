// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: messenger.sql

package repository

import (
	"context"
)

const insertConversation = `-- name: InsertConversation :one
INSERT INTO conversations (uuid, recipients)
VALUES (
    ?, ?
) RETURNING uuid, recipients, created_at
`

type InsertConversationParams struct {
	Uuid       string
	Recipients string
}

// add conversation to database
func (q *Queries) InsertConversation(ctx context.Context, arg *InsertConversationParams) (*Conversation, error) {
	row := q.queryRow(ctx, q.insertConversationStmt, insertConversation, arg.Uuid, arg.Recipients)
	var i Conversation
	err := row.Scan(&i.Uuid, &i.Recipients, &i.CreatedAt)
	return &i, err
}

const insertMessage = `-- name: InsertMessage :one
INSERT INTO messages (uuid, conversation_uuid, sender, body)
VALUES (
    ?, ?, ?, ?
) RETURNING uuid, conversation_uuid, sender, body, created_at
`

type InsertMessageParams struct {
	Uuid             string
	ConversationUuid string
	Sender           string
	Body             string
}

// add new message to database
func (q *Queries) InsertMessage(ctx context.Context, arg *InsertMessageParams) (*Message, error) {
	row := q.queryRow(ctx, q.insertMessageStmt, insertMessage,
		arg.Uuid,
		arg.ConversationUuid,
		arg.Sender,
		arg.Body,
	)
	var i Message
	err := row.Scan(
		&i.Uuid,
		&i.ConversationUuid,
		&i.Sender,
		&i.Body,
		&i.CreatedAt,
	)
	return &i, err
}

const readAllConversations = `-- name: ReadAllConversations :many
SELECT uuid, recipients, created_at
FROM conversations, json_each(conversations.recipients) as rt
WHERE recipients = ?
`

// retrieve all conversations that includes user uuid in recipients field
func (q *Queries) ReadAllConversations(ctx context.Context, recipients string) ([]*Conversation, error) {
	rows, err := q.query(ctx, q.readAllConversationsStmt, readAllConversations, recipients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Conversation{}
	for rows.Next() {
		var i Conversation
		if err := rows.Scan(&i.Uuid, &i.Recipients, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readAllMessages = `-- name: ReadAllMessages :many
SELECT uuid, conversation_uuid, sender, body, created_at
FROM messages
WHERE conversation_uuid = ?
`

// retrieve all messages by conversation uuid
func (q *Queries) ReadAllMessages(ctx context.Context, conversationUuid string) ([]*Message, error) {
	rows, err := q.query(ctx, q.readAllMessagesStmt, readAllMessages, conversationUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Message{}
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.Uuid,
			&i.ConversationUuid,
			&i.Sender,
			&i.Body,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
