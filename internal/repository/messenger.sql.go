// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: messenger.sql

package repository

import (
	"context"
	"database/sql"
)

const insertConversation = `-- name: InsertConversation :one
INSERT INTO conversations (uuid)
VALUES (
    ?
) RETURNING uuid, created_at, updated_at
`

// add conversation to database
func (q *Queries) InsertConversation(ctx context.Context, uuid string) (*Conversation, error) {
	row := q.queryRow(ctx, q.insertConversationStmt, insertConversation, uuid)
	var i Conversation
	err := row.Scan(&i.Uuid, &i.CreatedAt, &i.UpdatedAt)
	return &i, err
}

const insertMMConversationUser = `-- name: InsertMMConversationUser :execresult
INSERT INTO mm_conversations_users (
    uuid, conversation_uuid, user_uuid
) VALUES (
    ?, ?, ?
)
`

type InsertMMConversationUserParams struct {
	Uuid             string
	ConversationUuid string
	UserUuid         string
}

func (q *Queries) InsertMMConversationUser(ctx context.Context, arg *InsertMMConversationUserParams) (sql.Result, error) {
	return q.exec(ctx, q.insertMMConversationUserStmt, insertMMConversationUser, arg.Uuid, arg.ConversationUuid, arg.UserUuid)
}

const insertMessage = `-- name: InsertMessage :one
INSERT INTO messages (uuid, conversation_uuid, sender, body)
VALUES (
    ?, ?, ?, ?
) RETURNING uuid, conversation_uuid, sender, body, created_at
`

type InsertMessageParams struct {
	Uuid             string
	ConversationUuid string
	Sender           string
	Body             string
}

// add new message to database
func (q *Queries) InsertMessage(ctx context.Context, arg *InsertMessageParams) (*Message, error) {
	row := q.queryRow(ctx, q.insertMessageStmt, insertMessage,
		arg.Uuid,
		arg.ConversationUuid,
		arg.Sender,
		arg.Body,
	)
	var i Message
	err := row.Scan(
		&i.Uuid,
		&i.ConversationUuid,
		&i.Sender,
		&i.Body,
		&i.CreatedAt,
	)
	return &i, err
}

const readAllConversations = `-- name: ReadAllConversations :many
SELECT conversations.uuid, mm_conversations_users.user_uuid, conversations.updated_at
FROM conversations
JOIN mm_conversations_users
    ON conversation.uuid = mm_conversations_users.conversation_uuid
WHERE mm_conversations_users.user_uuid = ?
`

type ReadAllConversationsRow struct {
	Uuid      string
	UserUuid  string
	UpdatedAt sql.NullTime
}

// retrieve all conversations that includes user uuid in recipients field
func (q *Queries) ReadAllConversations(ctx context.Context, userUuid string) ([]*ReadAllConversationsRow, error) {
	rows, err := q.query(ctx, q.readAllConversationsStmt, readAllConversations, userUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ReadAllConversationsRow{}
	for rows.Next() {
		var i ReadAllConversationsRow
		if err := rows.Scan(&i.Uuid, &i.UserUuid, &i.UpdatedAt); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readAllMessages = `-- name: ReadAllMessages :many
SELECT uuid, conversation_uuid, sender, body, created_at
FROM messages
WHERE conversation_uuid = ?
`

// retrieve all messages by conversation uuid
func (q *Queries) ReadAllMessages(ctx context.Context, conversationUuid string) ([]*Message, error) {
	rows, err := q.query(ctx, q.readAllMessagesStmt, readAllMessages, conversationUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Message{}
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.Uuid,
			&i.ConversationUuid,
			&i.Sender,
			&i.Body,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
