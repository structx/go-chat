// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0

package repository

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.deleteContactStmt, err = db.PrepareContext(ctx, deleteContact); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteContact: %w", err)
	}
	if q.insertContactStmt, err = db.PrepareContext(ctx, insertContact); err != nil {
		return nil, fmt.Errorf("error preparing query InsertContact: %w", err)
	}
	if q.insertConversationStmt, err = db.PrepareContext(ctx, insertConversation); err != nil {
		return nil, fmt.Errorf("error preparing query InsertConversation: %w", err)
	}
	if q.insertMMConversationUserStmt, err = db.PrepareContext(ctx, insertMMConversationUser); err != nil {
		return nil, fmt.Errorf("error preparing query InsertMMConversationUser: %w", err)
	}
	if q.insertMessageStmt, err = db.PrepareContext(ctx, insertMessage); err != nil {
		return nil, fmt.Errorf("error preparing query InsertMessage: %w", err)
	}
	if q.insertUserStmt, err = db.PrepareContext(ctx, insertUser); err != nil {
		return nil, fmt.Errorf("error preparing query InsertUser: %w", err)
	}
	if q.readAllContactsStmt, err = db.PrepareContext(ctx, readAllContacts); err != nil {
		return nil, fmt.Errorf("error preparing query ReadAllContacts: %w", err)
	}
	if q.readAllConversationsStmt, err = db.PrepareContext(ctx, readAllConversations); err != nil {
		return nil, fmt.Errorf("error preparing query ReadAllConversations: %w", err)
	}
	if q.readAllMessagesStmt, err = db.PrepareContext(ctx, readAllMessages); err != nil {
		return nil, fmt.Errorf("error preparing query ReadAllMessages: %w", err)
	}
	if q.readContactStmt, err = db.PrepareContext(ctx, readContact); err != nil {
		return nil, fmt.Errorf("error preparing query ReadContact: %w", err)
	}
	if q.readUserStmt, err = db.PrepareContext(ctx, readUser); err != nil {
		return nil, fmt.Errorf("error preparing query ReadUser: %w", err)
	}
	if q.readUserDetailsStmt, err = db.PrepareContext(ctx, readUserDetails); err != nil {
		return nil, fmt.Errorf("error preparing query ReadUserDetails: %w", err)
	}
	if q.readUserLoginDetailsStmt, err = db.PrepareContext(ctx, readUserLoginDetails); err != nil {
		return nil, fmt.Errorf("error preparing query ReadUserLoginDetails: %w", err)
	}
	if q.searchContactsStmt, err = db.PrepareContext(ctx, searchContacts); err != nil {
		return nil, fmt.Errorf("error preparing query SearchContacts: %w", err)
	}
	if q.searchUserDetailsStmt, err = db.PrepareContext(ctx, searchUserDetails); err != nil {
		return nil, fmt.Errorf("error preparing query SearchUserDetails: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.deleteContactStmt != nil {
		if cerr := q.deleteContactStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteContactStmt: %w", cerr)
		}
	}
	if q.insertContactStmt != nil {
		if cerr := q.insertContactStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertContactStmt: %w", cerr)
		}
	}
	if q.insertConversationStmt != nil {
		if cerr := q.insertConversationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertConversationStmt: %w", cerr)
		}
	}
	if q.insertMMConversationUserStmt != nil {
		if cerr := q.insertMMConversationUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertMMConversationUserStmt: %w", cerr)
		}
	}
	if q.insertMessageStmt != nil {
		if cerr := q.insertMessageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertMessageStmt: %w", cerr)
		}
	}
	if q.insertUserStmt != nil {
		if cerr := q.insertUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertUserStmt: %w", cerr)
		}
	}
	if q.readAllContactsStmt != nil {
		if cerr := q.readAllContactsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing readAllContactsStmt: %w", cerr)
		}
	}
	if q.readAllConversationsStmt != nil {
		if cerr := q.readAllConversationsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing readAllConversationsStmt: %w", cerr)
		}
	}
	if q.readAllMessagesStmt != nil {
		if cerr := q.readAllMessagesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing readAllMessagesStmt: %w", cerr)
		}
	}
	if q.readContactStmt != nil {
		if cerr := q.readContactStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing readContactStmt: %w", cerr)
		}
	}
	if q.readUserStmt != nil {
		if cerr := q.readUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing readUserStmt: %w", cerr)
		}
	}
	if q.readUserDetailsStmt != nil {
		if cerr := q.readUserDetailsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing readUserDetailsStmt: %w", cerr)
		}
	}
	if q.readUserLoginDetailsStmt != nil {
		if cerr := q.readUserLoginDetailsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing readUserLoginDetailsStmt: %w", cerr)
		}
	}
	if q.searchContactsStmt != nil {
		if cerr := q.searchContactsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing searchContactsStmt: %w", cerr)
		}
	}
	if q.searchUserDetailsStmt != nil {
		if cerr := q.searchUserDetailsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing searchUserDetailsStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                           DBTX
	tx                           *sql.Tx
	deleteContactStmt            *sql.Stmt
	insertContactStmt            *sql.Stmt
	insertConversationStmt       *sql.Stmt
	insertMMConversationUserStmt *sql.Stmt
	insertMessageStmt            *sql.Stmt
	insertUserStmt               *sql.Stmt
	readAllContactsStmt          *sql.Stmt
	readAllConversationsStmt     *sql.Stmt
	readAllMessagesStmt          *sql.Stmt
	readContactStmt              *sql.Stmt
	readUserStmt                 *sql.Stmt
	readUserDetailsStmt          *sql.Stmt
	readUserLoginDetailsStmt     *sql.Stmt
	searchContactsStmt           *sql.Stmt
	searchUserDetailsStmt        *sql.Stmt
	updateUserStmt               *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                           tx,
		tx:                           tx,
		deleteContactStmt:            q.deleteContactStmt,
		insertContactStmt:            q.insertContactStmt,
		insertConversationStmt:       q.insertConversationStmt,
		insertMMConversationUserStmt: q.insertMMConversationUserStmt,
		insertMessageStmt:            q.insertMessageStmt,
		insertUserStmt:               q.insertUserStmt,
		readAllContactsStmt:          q.readAllContactsStmt,
		readAllConversationsStmt:     q.readAllConversationsStmt,
		readAllMessagesStmt:          q.readAllMessagesStmt,
		readContactStmt:              q.readContactStmt,
		readUserStmt:                 q.readUserStmt,
		readUserDetailsStmt:          q.readUserDetailsStmt,
		readUserLoginDetailsStmt:     q.readUserLoginDetailsStmt,
		searchContactsStmt:           q.searchContactsStmt,
		searchUserDetailsStmt:        q.searchUserDetailsStmt,
		updateUserStmt:               q.updateUserStmt,
	}
}
